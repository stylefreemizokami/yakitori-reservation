import Head from "next/head";
import { useRouter } from "next/router";
import { Geist, Geist_Mono } from "next/font/google";
import styles from "@/styles/Home.module.css";
import Header from "../../components/Header";
import { useState , useEffect} from 'react';

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

export default function Reservarion() {

  const [name, setName] = useState<string>('');
  const [date, setDate] = useState<string>('');
  const [tel, setTel] = useState<string>('');
  const [hour, setHour] = useState<string>('');
  const [note, setNote] = useState<string>('');
  const [people, setPeople] = useState<string>('');
  const [message, setMessage] = useState<string>('');
  const [isSuccess, setIsSuccess] = useState<boolean | null>(null);

const handleSubmit = async (e: React.FormEvent) => {
  e.preventDefault();

  const res = await fetch('/api/reservation', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ name, date, tel, hour, note, people}),
  });

  const data = await res.json();

  setIsSuccess(data.success);
  setMessage(data.message);

  if (data.success) {
    setName('');
    setDate('');
    setTel('');
    setHour('');
    setPeople('');
    setNote('');
  }
};

const loadTimes = async (date: string) => {
  const res = await fetch(`/api/reservetimes?date=${date}`);
  const times: {
    reservation_hour: string;
    available_seats: number;
    is_full: boolean;
  }[] = await res.json();

  const select = document.getElementById("hour") as HTMLSelectElement;
  if (select) {
    select.innerHTML = "";

    times.forEach((item: { reservation_hour: string; available_seats: number; is_full: boolean }) => {
      const option = document.createElement("option");
      option.value = item.reservation_hour;
      option.text = item.is_full
        ? `${item.reservation_hour}:00 （満席）`
        : `${item.reservation_hour}:00 （残席 ${item.available_seats}）`;
      option.disabled = item.is_full; // 満席は選択不可
      select.appendChild(option);
    });
  }
};

  useEffect(() => {
    if(date){
      loadTimes(date);
    }
  }, [date]);


  return (
    <>
      <Head>
        <title>日付予約</title>
        {/* <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" /> */}
      </Head>
      <Header />
      <div
        className={`${styles.page} ${geistSans.variable} `}
      >
        <main className={styles.main}>
          {message &&
            <p className={`${styles.message} ${isSuccess ? styles.success : styles.error}`}>
              {message}
            </p>
          }
          こちらの画面からご予約いただけます。
          <br/>
          ・営業時間（11:00 ~ 20:00）
          <br/>
          キャンセルはこちらの番号からお願いします。（090-1234-5678）
          <form onSubmit={handleSubmit} action="/reserve" method="post" className="reserve-form">
            <div className="form-group">
              <label htmlFor="name">お名前：</label>
              <input value={name} onChange={(e) => setName(e.target.value)} type="text" id="name" name="name" required></input>
            </div>
            <div className="form-group">
              <label htmlFor="tel">電話番号：</label>
              <input value={tel} onChange={(e) => setTel(e.target.value)} type="tel" id="tel" name="tel" pattern="\d{10,11}"  inputMode="numeric" placeholder="09012345678" required></input>
            </div>
            <div className="form-group">
              <label htmlFor="reservation-date">予約日：</label>
              <input value={date} onChange={(e) => setDate(e.target.value)} type="date" id="date" name="reservation_date" required></input>
            </div>
            <div className="form-group">
              <label htmlFor="reservation-hour">予約時間：</label>
                <select
                  value={hour}
                  onChange={(e) => setHour(e.target.value)}
                  id="hour"
                  name="reservation_hour"
                  required
                >
                  {/* options は JS で動的に追加 */}
                </select>
            </div>
            <div className="form-group">
              <label htmlFor="number-of-people">人数：</label>
              <input value={people} onChange={(e) => setPeople(e.target.value)} type="number" id="people" name="number_of_people" min="1" max="10" required></input>
            </div>
            <div className="form-group">
              <label htmlFor="note">ご要望（任意）：</label>
              <input value={note} onChange={(e) => setNote(e.target.value)} type="text" id="note" name="note" placeholder="例：アレルギー、席の希望など"></input>
            </div>
            <div>
              <button type="submit" >予約する</button>
            </div>
            <style jsx>{`
              body {
                font-family: "Hiragino Sans", "Noto Sans JP", sans-serif;
                background: #f9f9f9;
                display: flex;
                justify-content: center;
                align-items: center;
                height: 100vh;
              }
              .reserve-form {
                background: #fff;
                padding: 2rem;
                border-radius: 16px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.1);
                width: 720px;
              }
              .reserve-form h2 {
                font-size: 1.2rem;
                margin-bottom: 1rem;
                text-align: center;
              }
              .form-group {
                margin-bottom: 1rem;
              }
              label {
                display: block;
                margin-bottom: 0.4rem;
                font-weight: bold;
                font-size: 0.9rem;
              }
              input, select {
                width: 100%;
                padding: 0.6rem;
                border: 1px solid #ccc;
                border-radius: 8px;
                font-size: 0.9rem;
              }
              .number-box {
                display: flex;
                align-items: center;
              }
              .number-box input {
                text-align: center;
              }
              button {
                width: 100%;
                padding: 0.8rem;
                background: #0078ff;
                color: #fff;
                border: none;
                border-radius: 8px;
                font-size: 1rem;
                font-weight: bold;
                cursor: pointer;
                transition: background 0.3s;
              }
              button:hover {
                background: #005fcc;
              }
            `}</style>
          </form>
          <div className={styles.ctas}>
          </div>
        </main>
        <footer className={styles.footer}>
        </footer>
      </div>
    </>
  );
}
